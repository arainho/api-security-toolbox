# golang:alpine3.14
FROM docker.io/golang@sha256:5ce2785c82a96349131913879a603fc44d9c10d438f61bba84ee6a1ef03f6c6f AS build-env
LABEL org.opencontainers.image.authors="github.com/arainho"

ENV MY_USER="appuser"
ENV MY_GROUP="appgroup"
ENV MY_HOME="/home/$MY_USER"
ENV GOPATH="$MY_HOME/go"
ENV APPS_TARGET="$MY_HOME/apps"
ENV PATH="$MY_HOME/bin:$MY_HOME/go/bin:$MY_HOME/.local/bin:$HOME/node_modules/.bin:$HOME/.rbenv/bin:$PATH:$MY_HOME/.cargo/bin:$MY_HOME/.apicheck_manager/bin:$PATH"
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# general
RUN addgroup -g 9999 $MY_GROUP && \
    adduser -u 9999 -D -G $MY_GROUP -h $MY_HOME $MY_USER && \
    apk update && \
    apk add --no-cache sudo && \
    adduser $MY_USER wheel && \
    echo "$MY_USER ALL=(ALL) ALL" > /etc/sudoers.d/$MY_USER && \
    chmod 0440 /etc/sudoers.d/$MY_USER && \
    apk add --no-cache bash zsh fish \
                       bind-tools openssh git \
                       mandoc man-pages less less-doc \
                       netcat-openbsd curl wget httpie nmap \
                       ca-certificates coreutils libzip-dev zip unzip && \
    apk add --no-cache --update python2 python3 py3-pip && \
    python2 -m ensurepip && \
    unlink /usr/bin/pip && \
    unlink /usr/bin/python && \
    ln -s /usr/bin/pip3 /usr/bin/pip && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    python2 -m pip install --upgrade pip setuptools && \
    python3 -m pip install --upgrade pip setuptools && \
    apk add --no-cache --update nodejs npm && \
    apk add --no-cache --update libffi-dev python3-dev && \
    apk add --no-cache --update wireshark xxd protoc && \
    apk add --no-cache --update perl && \
    apk add --no-cache --update ruby ruby-dev && \
    apk add --no-cache --update openssl openssl-dev openssl-libs-static  && \
    apk add --no-cache --update alpine-sdk clang gcc make build-base cmake && \
    apk add --no-cache --update bsd-compat-headers linux-headers && \
    apk add --no-cache --update zlib-dev libevent libevent-dev && \
    apk add --no-cache --update openjdk8-jre gradle && \
    apk add --no-cache --update bash icu-libs krb5-libs libgcc libintl libssl1.1 libstdc++ zlib && \
    apk add --no-cache libgdiplus --repository https://dl-3.alpinelinux.org/alpine/edge/testing && \
    adduser $MY_USER wireshark
    

USER $MY_USER

# workdir
RUN mkdir -m 750 -p $APPS_TARGET && \
    mkdir -m 750 -p $MY_HOME/bin && \
    mkdir -m 750 -p $MY_HOME/plugins && \
    mkdir -m 750 -p $MY_HOME/wordlists && \
    mkdir -m 750 -p $MY_HOME/extensions && \
    mkdir -m 750 -p $MY_HOME/templates && \
    mkdir -m 750 -p $MY_HOME/signatures && \
    mkdir -m 750 -p $MY_HOME/share/man/man1

# virtual envs, pkg's and versions managers
RUN python3 -m pip install --upgrade pipenv && \
    python3 -m pip install --user virtualenv && \
    python2 -m pip install --user virtualenv && \
    git clone https://github.com/rbenv/rbenv.git ~/.rbenv && \
    export PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH" && \
    echo 'if which ruby >/dev/null && which gem >/dev/null; then PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"; fi' >> ~/.bashrc && \
    npm install yarn && \
    export PATH="$PATH:$($HOME/node_modules/.bin/yarn global bin)" && \
    echo 'if which yarn >/dev/null; then echo export PATH="$PATH:$($HOME/node_modules/.bin/yarn global bin)"; fi' >> ~/.bashrc && \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
    source $MY_HOME/.cargo/env && \
    rustup component add rustfmt && \
    rustup component add clippy

#######################################################
# STEPS FOR TESTING                                   #
# 1. change 'tool-name' and 'installation commands';  #
# 2. remove the symbols < and >                       #
# 3. uncomment ENV and RUN lines                      #
# 4. build the image                                  #
#######################################################
# ENV TOOL_NAME="tool-name"
# RUN <add installation commands here>

ENV TOOL_NAME="kr"
# testing enumeration tools
RUN go install github.com/OJ/gobuster/v3@latest && \
    python3 -m pip install --user dirsearch && \
    go get -u -v github.com/dwisiswant0/wadl-dumper && \
    go get -u -v github.com/ffuf/ffuf && \
    git clone --depth=1 https://github.com/OWASP/Amass.git $APPS_TARGET/Amass && \
        cd $APPS_TARGET/Amass && \
        go install -v ./... && \
    go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest && \
        git clone --depth=1 https://github.com/projectdiscovery/nuclei-templates.git $MY_HOME/templates/nuclei-templates && \
    GO111MODULE=on go get -u -v github.com/jaeles-project/jaeles && \
        GO111MODULE=on go get -u github.com/jaeles-project/gospider && \
        git clone --depth=1 https://github.com/jaeles-project/jaeles-signatures.git $MY_HOME/signatures/jaeles-signatures && \
    python3 -m pip install --user --upgrade arjun && \
    git clone --depth=1 https://github.com/devanshbatham/ParamSpider $APPS_TARGET/ParamSpider && \
        cd $APPS_TARGET/ParamSpider && \
        python3 -m pip install --user -r requirements.txt && \
    git clone --depth=1 https://github.com/mseclab/PyJFuzz.git $APPS_TARGET/PyJFuzz && \
        cd $APPS_TARGET/PyJFuzz && \
        python3 setup.py install --prefix=$MY_HOME/.local && \
    git clone --depth=1 https://github.com/Teebytes/TnT-Fuzzer.git $APPS_TARGET/TnT-Fuzzer && \
        cd $APPS_TARGET/TnT-Fuzzer && \
        python3 setup.py install --prefix=$MY_HOME/.local


# testing burp extentions or utilities
RUN cd $MY_HOME/extensions && \
    git clone --depth=1 https://github.com/portswigger/wsdl-wizard && \
    git clone --depth=1 https://github.com/NetSPI/Wsdler && \
    git clone --depth=1  https://github.com/SecurityInnovation/AuthMatrix.git && \
    git clone --depth=1 https://github.com/PortSwigger/autorize.git && \
    git clone --depth=1 https://github.com/portswigger/auth-analyzer && \
    git clone --depth=1 https://github.com/doyensec/inql && \
    git clone --depth=1 https://github.com/wallarm/jwt-heartbreaker.git && \
    git clone --depth=1 https://github.com/PortSwigger/json-web-token-attacker.git && \
    pip3 install json2paths

CMD ["/bin/bash"]
